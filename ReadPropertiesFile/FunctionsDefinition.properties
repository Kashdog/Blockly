# NLS_ENCODING=UNICODE
# NLS_MESSAGEFORMAT_NONE

category.checks.name = Checks
category.operations.name = Operations
category.logic.name = Logic
category.variables_literals.name = Variables & Literals

category.general.name = General
category.general.desc = Functions for general purposes

category.datetime.name = Date/Time
category.datetime.desc = Functions manipulating temporal data (date, time, timestamp)

category.math.name = Mathematical
category.math.desc = Mathematical functions

category.string.name = String
category.string.desc = Functions manipulating strings

function.coalesce.displayName = replace missing value for %1 with %2
function.coalesce.desc = Replace a missing value with a specific value
function.coalesce.param1.desc = The value to test
function.coalesce.param2.desc = The replacement value to use if the value is NULL

function.lookup.displayName = lookup %1 from reference key %2 and reference value %3
function.lookup.desc = Replace a value with another value defined in a lookup table
function.lookup.param1.desc = The value to replace
function.lookup.param2.desc = The reference column containing the keys in the lookup table
function.lookup.param3.desc = The reference column containing the values in the lookup table

function.date.displayName = current date
function.date.desc = Returns the system date from the computer as a date value

function.datevalue.displayName = convert %1 to date using format %2
function.datevalue.desc = Converts the string representation of a date into a date value
function.datevalue.param1.desc = String value to convert into a date
function.datevalue.param2.desc = Optional format string describing how the date is represented in the string.\n\
%dd represents the 2 digits day: from 01 to 31\n\
%mm represents the 2 digits month: from 01 to 12\n\
%mmm represents the 3 chars month representation: Jan, Feb, ...\n\
%yy represents the 2 digits years representation\n\
%yyyy represents the 4 digits years representation\n\
If this parameter is ignored, the default format is '%yyyy-%mm-%dd'\n\

function.day.displayName = day of date %1
function.day.desc = Given a date, returns a number representing the day of the month for that date
function.day.param1.desc = Date value

function.month.displayName = month of date %1
function.month.desc = Given a date, returns a number representing the month for that date
function.month.param1.desc = Date value

function.weekday.displayName = day of week for date %1
function.weekday.desc = Given a date, returns a number representing the day of week for that date, starting with 1 for Sunday
function.weekday.param1.desc = Date value

function.year.displayName = year of date %1
function.year.desc = Given a date, returns a number representing the year for that date
function.year.param1.desc = Date value

function.time.displayName = current time
function.time.desc = Returns the system time from the computer as a time value

function.timevalue.displayName = convert %1 to time using format %2
function.timevalue.desc = Converts the string representation of a time into a time value
function.timevalue.param1.desc = String value to convert into a time
function.timevalue.param2.desc = Optional format string describing how the time is represented in the string.\n\
%hh represents two digit hours\n\
%nn represents two digit minutes\n\
%ss represents two digit seconds\n\
%ss.N represents two digit fractional seconds where N is the number of fractional digits (0-6).\n\
If this parameter is ignored, the default format is '%hh:%nn:%ss'

function.timestamp.displayName = current timestamp
function.timestamp.desc = Returns the system time from the computer as a timestamp value

function.timestampvalue.displayName = convert %1 to timestamp using format %2
function.timestampvalue.desc = Converts the string representation of a timestamp into a timestamp value
function.timestampvalue.param1.desc = String value to convert into a timestamp
function.timestampvalue.param2.desc = Optional format string describing how the time is represented in the stringstamp.\n\
%dd represents the 2 digits day: from 01 to 31\n\
%mm represents the 2 digits month: from 01 to 12\n\
%mmm represents the 3 chars month representation: Jan, Feb, ...\n\
%yy represents the 2 digits years representation\n\
%yyyy represents the 4 digits years representation\n\
%hh represents two digit hours\n\
%nn represents two digit minutes\n\
%ss represents two digit seconds\n\
%ss.N represents two digit fractional seconds where N is the number of fractional digits (0-6).\n\
If this parameter is ignored, the default format is '%yyyy-%mm-%dd %hh:%nn:%ss'

function.hours.displayName = hour of time %1
function.hours.desc = Given a time, returns a number representing the hours for that time
function.hours.param1.desc = Time value

function.minutes.displayName = minutes of time %1
function.minutes.desc = Given a time, returns a number representing the minutes for that time
function.minutes.param1.desc = Time value

function.seconds.displayName = seconds of time %1
function.seconds.desc = Given a time, returns a number representing the seconds and milliseconds for that time
function.seconds.param1.desc = Time value

function.datediff.displayName = number of days between dates %1 and %2
function.datediff.desc = Determine the number of days difference between two dates
function.datediff.param1.desc = First date value
function.datediff.param2.desc = Second date value

function.timediff.displayName = time difference between times %1 and %2
function.timediff.desc = Determine the number of hours/minutes/seconds difference between two times
function.timediff.param1.desc = First time value
function.timediff.param2.desc = Second time value

function.addmonthstimestamp.displayName = add %2 months to timestamp %1
function.addmonthstimestamp.desc= Adds the months to the TimeStamp specified
function.addmonthstimestamp.param1.desc = TimeStamp value
function.addmonthstimestamp.param2.desc = Integer value

function.addmonthsdate.displayName = add %2 months to date %1
function.addmonthsdate.desc= Adds the months to the Date specified
function.addmonthsdate.param1.desc = Date value
function.addmonthsdate.param2.desc = Integer value

function.abs.displayName = absolute value of %1
function.abs.desc = Returns the absolute value of a numeric value
function.abs.param1.desc = Value

function.avg.displayName = average value of %1 grouped by %2
function.avg.desc = Aggregate function, returns the average value of a numeric column
function.avg.param1.desc = Numeric column
function.avg.param2.desc = Optional grouping column

function.exp.displayName = exponential value of %1
function.exp.desc = Returns the exponential value of a numeric value
function.exp.param1.desc = Value

function.max.displayName = maximum value of %1 grouped by %2
function.max.desc = Aggregate function, returns the maximum value of a numeric column
function.max.param1.desc = Numeric column
function.max.param2.desc = Optional grouping column

function.min.displayName = minimum value of %1 grouped by %2
function.min.desc = Aggregate function, returns the minimum value of a numeric column
function.min.param1.desc = Numeric column
function.min.param2.desc = Optional grouping column

function.round.displayName = round number %1 keeping %2 decimals
function.round.desc = Returns a rounded value of a numeric value
function.round.param1.desc = Numeric value to round
function.round.param2.desc = Optional number of decimals to return

function.round_date.displayName = round date %1 using format %2
function.round_date.desc = Returns a rounded value of a date
function.round_date.param1.desc = Date to round
function.round_date.param2.desc = Format indicating how the date should be rounded

function.round_time.displayName = round time %1 using format %2
function.round_time.desc = Returns a rounded value of a time
function.round_time.param1.desc = Time to round
function.round_time.param2.desc = Format indicating how the time should be rounded

function.round_timestamp.displayName = round timestamp %1 using format %2
function.round_timestamp.desc = Returns a rounded value of a timestamp
function.round_timestamp.param1.desc = Timestamp to round
function.round_timestamp.param2.desc = Format indicating how the timestamp should be rounded

function.sqrt.displayName = square root of %1
function.sqrt.desc = Returns the square root value of a numeric value
function.sqrt.param1.desc = Value

function.standardize.displayName = normalize value %1 grouped by %2
function.standardize.desc = Normalizes a numerical value based on the average value and standard deviation of all the other values of the same column. The formula used is: standardize(x)=(x-mean(x))/stddev(x)
function.standardize.param1.desc = Numeric column
function.standardize.param2.desc = Optional grouping column

function.stddev.displayName = standard deviation of %1 grouped by %2
function.stddev.desc = Aggregate function, returns the standard deviation of all the values of a numeric column
function.stddev.param1.desc = Numeric column
function.stddev.param2.desc = Optional grouping column

function.sum.displayName = sum of %1 grouped by %2
function.sum.desc = Aggregate function, returns the sum of all the values of a numeric column
function.sum.param1.desc = Numeric column
function.sum.param2.desc = Optional grouping column

function.trunc.displayName = truncate number %1 keeping %2 decimals
function.trunc.desc = Returns the integer value obtained by truncating the decimal part of a numeric value
function.trunc.param1.desc = Numeric value to truncate
function.trunc.param2.desc = Optional number of decimals to return

function.trunc_date.displayName = truncate date %1 using format %2
function.trunc_date.desc = Returns a truncated value of a date
function.trunc_date.param1.desc = Date to trunc
function.trunc_date.param2.desc = Format indicating how the date should be truncated

function.trunc_time.displayName = truncate time %1 using format %2
function.trunc_time.desc = Returns a truncated value of a time
function.trunc_time.param1.desc = Time to trunc
function.trunc_time.param2.desc = Format indicating how the time should be truncated

function.trunc_timestamp.displayName = truncate timestamp %1 using format %2
function.trunc_timestamp.desc = Returns a truncated value of a timestamp
function.trunc_timestamp.param1.desc = Timestamp to trunc
function.trunc_timestamp.param2.desc = Format indicating how the timestamp should be truncated

function.ascii.displayName = ASCII code of character %1
function.ascii.desc = Returns ASCII character set value. Ex: ascii("C") returns 35
function.ascii.param1.desc = The char. If the string value contains more than one char, only the first char will be considered

function.char.displayName = character with ASCII code %1
function.char.desc = Returns the CHAR value. This function is the opposite of ascii. Ex: char(35) returns 'C'
function.char.param1.desc = The ASCII code to convert to a char

function.convert.displayName = replace all in string %1 instances of %2 with %3
function.convert.desc = Converts a substring occurrence in a string to another. Ex: convert('hello', "ll', 'zz') returns 'hezzo'
function.convert.param1.desc = The original string where to do the replacement
function.convert.param2.desc = The substring to replace
function.convert.param3.desc = The new substring to use as a replacement

function.count.displayName = Number of distinct values of %1 grouped by %2
function.count.desc = Aggregate function, provides a count of the number of distinct values of a given column
function.count.param1.desc = Column to count
function.count.param2.desc = Optional grouping column

function.count_non_null.displayName = Number of non null values of %1 grouped by %2
function.count_non_null.desc = Aggregate function, provides a count of the number of non null values of a given column
function.count_non_null.param1.desc = Column to count
function.count_non_null.param2.desc = Optional grouping column

function.occurrences.displayName = Frequency of %1
function.occurrences.desc = Aggregate function, provides the number of occurrences of each value of a given column
function.occurrences.param1.desc = Column to count
function.occurrences.param2.desc = Optional grouping column

function.lcase.displayName = lower case of %1
function.lcase.desc = Converts string to lower case
function.lcase.param1.desc = The string to convert

function.index.displayName = position of %2 in string %1
function.index.desc = Returns the index of the first occurrence of a substring in another string.\n\
Returns the zero-based index of the occurrence if found, or -1 if the substring is not found
function.index.param1.desc = The string to analyze
function.index.param2.desc = The substring to find

function.left.displayName = first %2 characters %1
function.left.desc = Returns the first n characters of a string.
function.left.param1.desc = The original string
function.left.param2.desc = The number of characters to retrieve

function.len.displayName = length of %1
function.len.desc = Returns the number of characters in a string or the number of elements in a list
function.len.param1.desc = The string or list

function.ltrim.displayName = left trim of %1
function.ltrim.desc = Removes all blank spaces at the beginning of a string
function.ltrim.param1.desc = The string to convert

function.pad.displayName = add %2 spaces before and %3 spaces after %1
function.pad.desc = Add spaces at the beginning and the end of a string
function.pad.param1.desc = The string to convert
function.pad.param2.desc = Number of spaces to add at the beginning of the string
function.pad.param3.desc = Number of spaces to add at the end of the string

function.lpad.displayName = insert %2 spaces before %1
function.lpad.desc = Add spaces at the beginning of a string
function.lpad.param1.desc = The string to convert
function.lpad.param2.desc = Number of spaces to add

function.rpad.displayName = add %2 spaces after %1
function.rpad.desc = Add spaces at the end of a string
function.rpad.param1.desc = The string to convert
function.rpad.param2.desc = Number of spaces to add

function.right.displayName = last %2 characters of %1
function.right.desc = Returns the last n characters of a string.
function.right.param1.desc = The original string
function.right.param2.desc = The number of characters to retrieve

function.rtrim.displayName = right trim %1
function.rtrim.desc = Removes all blank spaces at the end of a string
function.rtrim.param1.desc = The string to convert

function.substring.displayName = substring of %1 beginning at position %2 and of length %3
function.substring.desc = returns a substring of a string value. Ex: substring('hello',3, 2) returns 'll'
function.substring.param1.desc = The original string
function.substring.param2.desc = The index of the first character to retrieve (inclusive), 1 being the index of the first character
function.substring.param3.desc = The length of the substring to retrieve

function.str.displayName = concatenate %2 times the string %1
function.str.desc = creates a string of N occurrences of a substring. Ex: str('z', 5) produces 'zzzzz'
function.str.param1.desc = The string to repeat
function.str.param2.desc = The number of times the string should be repeated

function.tostring.displayName = convert %1 to string using format %2
function.tostring.desc = Converts a value (number, time, date, etc...) to its string representation
function.tostring.param1.desc = The value to convert
function.tostring.param2.desc = A format string describing how the generated string should be formatted\n\
The generated string will have the same format as the format string where embedded format tags are substituted by the value to convert or part of it.\
If the value to convert is a date or a time, the format string can contain the following format tags:\
%dd to insert the 2 digits day of a date: from 01 to 31\n\
%mm to insert the 2 digits month of a date: from 01 to 12\n\
%mmm to insert the 3 chars month representation of a date: Jan, Feb, ...\n\
%yy to insert the the 2 digits years representation of a date\n\
%yyyy to insert the 4 digits years representation of a date\n\
%hh to insert the two digit hours of a time\n\
%nn to insert the two digit minutes of a time\n\
%ss to insert the two digit seconds of a time\n\
%ss.N to insert the fractional two digit seconds of a time, where N is the number of fractional digits (0-6).\n\
\n\
If the value to convert is numeric, the format string can contain one of the following format tag:\n\
%i to represent the value as a signed decimal integer (ex: 123)\n\
%e to represent the value as a scientific notation (mantise/exponent) using a e character (ex: 1.2345e+2)\n\
%E to represent the value as a scientific notation (mantise/exponent) using a E character (ex: 1.2345E+2)\n\
%f to represent the value as a floating point decimal (ex: 123.45)\n\
The tag can also contain optional width and precision specifiers, as follow: %[width][.precision]tag (for instance For instance %4.2f).

function.scale.displayName = scale of number %1
function.scale.desc = Returns the scale of the numeric/string value entered
function.scale.param1.desc = The numeric/string value whose scale needs to be returned

function.trim.displayName = trim %1
function.trim.desc = Removes all blank spaces at the beginning and at the end of a string
function.trim.param1.desc = The string to convert

function.ucase.displayName = upper case of %1
function.ucase.desc = Converts string to upper case
function.ucase.param1.desc = The string to convert

function.val.displayName = parse %1 as a number
function.val.desc = Converts the string representation of a number into a numeric value
function.val.param1.desc = The string to convert

function.dataclassesof.displayName = Data classes matched by %1
function.dataclassesof.desc = Returns the list of data classes matched by a value
function.dataclassesof.param1.desc = The value to classify 



test.equality.displayName = %1 = %2
test.equality.desc = Tests if the 2 values are equals

test.notEquals.displayName = %1 <> %2
test.notEquals.desc = Tests if the 2 values are different

test.greaterThan.displayName = %1 > %2
test.greaterThan.desc = Tests if the left value is greater than the right value

test.greaterOrEqual.displayName = %1 >= %2
test.greaterOrEqual.desc = Tests if the left value is greater than or equals to the right value

test.lessThan.displayName = %1 < %2
test.lessThan.desc = Tests if the left value is less than the right value

test.lessOrEqual.displayName = %1 <= %2
test.lessOrEqual.desc = Tests if the left value is less than or equals to the right value

test.contains.displayName = %1 contains substring %2
test.contains.desc = Tests if the left values contains the right value as a substring

test.exists.displayName = %1 exists
test.exists.desc = Tests if the left value exists (is not null)

test.in_reference_column.displayName = %1 exists in reference column %2
test.in_reference_column.desc = Tests if the left value exists in the reference column represented by the right value

test.in_reference_list.displayName = %1 is in reference list %2
test.in_reference_list.desc = Tests if the left value exists in the list represented by the right value

test.is_date.displayName = %1 is a date using format %2
test.is_date.desc = Tests if the left string value can be parsed as a date by using the format indicated in the right value. 

test.is_numeric.displayName = %1 is numeric
test.is_numeric.desc = Tests if the left string value can be parsed as a number

test.matches_dataclass.displayName = %1 matches data class %2
test.matches_dataclass.desc = Tests if the left value matches the data class whose class code is in the right value 

test.matches_format.displayName = %1 matches format %2
test.matches_format.desc = Tests if the left values has the format indicated in the right value

test.matches_regex.displayName = %1 matches regex %2
test.matches_regex.desc = Tests if the left value matches the regular expression represented by the right value

test.occurs.displayName = %1 occurs %2 time(s)
test.occurs.desc = Tests if the number of occurrences of the left value in the whole column is exactly the number represented by the right value

test.occurslte.displayName = %1 occurs at most %2 time(s)
test.occurslte.desc = Tests if the number of occurrences of the left value in the whole column is at most the number represented by the right value 

test.occurslt.displayName = %1 occurs less than %2 time(s)
test.occurslt.desc = Tests if the number of occurrences of the left value in the whole column is less than the number represented by the right value

test.occursgte.displayName = %1 occurs at least %2 time(s)
test.occursgte.desc = Tests if the number of occurrences of the left value in the whole column is at least the number represented by the right value

test.occursgt.displayName = %1 occurs more than %2 time(s)
test.occursgt.desc = Tests if the number of occurrences of the left value in the whole column is more than the number represented by the right value

test.unique.displayName = %1 is unique
test.unique.desc = Tests if the left value is unique in its whole column

operation.addition.displayName = %1 + %2 
operation.addition.desc = Arithmetic addition of numbers or concatenation of strings

operation.division.displayName = %1 / %2 
operation.division.desc = Arithmetic division of numbers

operation.modulo.displayName = %1 modulo %2 
operation.modulo.desc = Modulo operation (rest of the integer division of the left number divided by the right number)

operation.multiplication.displayName = %1 * %2 
operation.multiplication.desc = Arithmetic multiplication of numbers

operation.power.displayName = %1 ^ %2 
operation.power.desc = Left number elevated to the power of the right number

operation.substraction.displayName = %1 - %2 
operation.substraction.desc = Arithmetic substraction of numbers


booleanOperator.and.displayName = %1 AND %2
booleanOperator.and.desc = AND combination or 2 conditions: The result is true if both conditions are verified

booleanOperator.or.displayName = %1 OR %2
booleanOperator.or.desc = OR combination or 2 conditions: The result is true if any of the 2 conditions is verified

booleanOperator.not.displayName = NOT %1
booleanOperator.not.desc = NOT operator: inverts the result of the condition

booleanOperator.if_then.displayName = IF %1 THEN %2
booleanOperator.if_then.desc = Conditional check: If the condition in the IF block is verified, then the condition in the THEN block must be verified

booleanOperator.if_then_else.displayName = IF %1 THEN %2 ELSE %3
booleanOperator.if_then_else.desc = Conditional check: If the condition in the IF block is verified, then the condition in the THEN block must be verified, otherwise the ELSE block must be verified

variable.desc = A variable which can be bound to a data field

numericLiteral.desc = A numeric literal

stringLiteral.desc = A string literal

classification_positive_when.displayName = The classification is positive when
classification_positive_when.desc = Declares the condition that must be verified for the classification to be positive

column_name.displayName = name of the column
column_name.desc = This variable contains the name of the column or field containing the value to be classified

column_rid.displayName = RID of the column
column_rid.desc = This variable contains the unique identifier representing the column or field containing the value to be classified

value.displayName = value
value.desc = This variable contains the value which is being classified by the classifier

value_frequency.displayName = frequency of the value
value_frequency.desc = This variable contains the number of occurrences in its column of the value being classified 

value_format.displayName = format of the value
value_format.desc = This variable contains the format of the value being classified 
